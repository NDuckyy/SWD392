// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SWD392_backend.Context;
using SWD392_backend.Entities.Enums;

#nullable disable

namespace SWD392_backend.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250721153213_V3_AddShipperIdFieldOrders")]
    partial class V3_AddShipperIdFieldOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", "order_status", new[] { "pending", "preparing", "delivery", "delivered", "returned", "cancelled", "refunding", "refunded" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("product_images_seq");

            modelBuilder.HasSequence("products_id_seq");

            modelBuilder.HasSequence("products_images_seq");

            modelBuilder.Entity("SWD392_backend.Entities.category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("SWD392_backend.Entities.order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("AreaCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("area_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveriedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deliveried_at");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<int?>("ShipperId")
                        .HasColumnType("integer")
                        .HasColumnName("shipper_id");

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("shipping_price");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("orders_pkey");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("SWD392_backend.Entities.orders_detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percent");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<OrderStatus>("Status")
                        .HasColumnType("order_status")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("orders_detail_pkey");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("orders_detail");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("available_quantity");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("categories_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("DiscountPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("discount_percent");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_price");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSale")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sale");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("RatingAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("rating_average");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sku");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<int>("SoldQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sold_quantity");

                    b.Property<int>("StockInQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_in_quantity");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id")
                        .HasName("products_pkey");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "Name" }, "products_name_index");

                    b.ToTable("products");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product_attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("product_attribute_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("product_attribute");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product_image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<string>("ProductImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("product_image_url");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer")
                        .HasColumnName("products_id");

                    b.HasKey("Id")
                        .HasName("product_images_pkey");

                    b.HasIndex(new[] { "ProductsId", "IsMain" }, "idx_product_images_productid_ismain");

                    b.ToTable("product_images");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product_review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("product_reviews_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("product_reviews");
                });

            modelBuilder.Entity("SWD392_backend.Entities.shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("area_code");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("shipper_pkey");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("shipper");
                });

            modelBuilder.Entity("SWD392_backend.Entities.supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("suppliers_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("SWD392_backend.Entities.user", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("AreaCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("area_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("SWD392_backend.Entities.order", b =>
                {
                    b.HasOne("SWD392_backend.Entities.supplier", "supplier")
                        .WithMany("orders")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("fk_orders_supplier");

                    b.HasOne("SWD392_backend.Entities.user", "user")
                        .WithMany("orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_orders_user");

                    b.Navigation("supplier");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SWD392_backend.Entities.orders_detail", b =>
                {
                    b.HasOne("SWD392_backend.Entities.order", "order")
                        .WithMany("orders_details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392_backend.Entities.product", "product")
                        .WithMany("orders_details")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_orders_detail_order");

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product", b =>
                {
                    b.HasOne("SWD392_backend.Entities.category", "categories")
                        .WithMany("products")
                        .HasForeignKey("CategoriesId")
                        .IsRequired()
                        .HasConstraintName("fk_products_categories");

                    b.HasOne("SWD392_backend.Entities.supplier", "supplier")
                        .WithMany("products")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("fk_products_suppliers");

                    b.Navigation("categories");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product_attribute", b =>
                {
                    b.HasOne("SWD392_backend.Entities.product", "product")
                        .WithMany("product_attributes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_product_attribute_product");

                    b.Navigation("product");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product_image", b =>
                {
                    b.HasOne("SWD392_backend.Entities.product", "products")
                        .WithMany("product_images")
                        .HasForeignKey("ProductsId")
                        .IsRequired()
                        .HasConstraintName("fk_product_images_products");

                    b.Navigation("products");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product_review", b =>
                {
                    b.HasOne("SWD392_backend.Entities.product", "product")
                        .WithMany("product_reviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_product_reviews_product");

                    b.HasOne("SWD392_backend.Entities.user", "user")
                        .WithMany("product_reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_product_reviews_user");

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SWD392_backend.Entities.shipper", b =>
                {
                    b.HasOne("SWD392_backend.Entities.user", "user")
                        .WithOne("shipper")
                        .HasForeignKey("SWD392_backend.Entities.shipper", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_shipper_user");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SWD392_backend.Entities.supplier", b =>
                {
                    b.HasOne("SWD392_backend.Entities.user", "user")
                        .WithMany("suppliers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_suppliers_user");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SWD392_backend.Entities.category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("SWD392_backend.Entities.order", b =>
                {
                    b.Navigation("orders_details");
                });

            modelBuilder.Entity("SWD392_backend.Entities.product", b =>
                {
                    b.Navigation("orders_details");

                    b.Navigation("product_attributes");

                    b.Navigation("product_images");

                    b.Navigation("product_reviews");
                });

            modelBuilder.Entity("SWD392_backend.Entities.supplier", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("products");
                });

            modelBuilder.Entity("SWD392_backend.Entities.user", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("product_reviews");

                    b.Navigation("shipper");

                    b.Navigation("suppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
